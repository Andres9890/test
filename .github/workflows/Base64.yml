name: Decode Base64 Image from File

on:
  workflow_dispatch:
    inputs:
      base64_file:
        description: 'Path to Base64 text file (relative to repo root)'
        required: true
        default: 'base64.txt'

jobs:
  python:
    name: Decode with Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Decode Base64 using Python
        run: |
          mkdir output_python

          python3 - << 'EOF'
import base64

# read + strip whitespace
raw = open('${{ inputs.base64_file }}', 'r').read().strip()

# if it's a data URI, drop the prefix
if raw.startswith('data:') and ',' in raw:
    raw = raw.split(',', 1)[1]

# decode & write
with open('output_python/image.png', 'wb') as f:
    f.write(base64.b64decode(raw))
EOF

      - name: Upload Python Output
        uses: actions/upload-artifact@v4
        with:
          name: decoded-image-python
          path: output_python/

  bash:
    name: Decode with Bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Decode Base64 using Bash
        run: |
          mkdir output_bash

          # strip any data URI prefix, remove CR/LFs, then decode
          sed 's/^.*,//' "${{ inputs.base64_file }}" \
            | tr -d '\r\n' \
            | base64 -d > output_bash/image.png

      - name: Upload Bash Output
        uses: actions/upload-artifact@v4
        with:
          name: decoded-image-bash
          path: output_bash/

  powershell:
    name: Decode with PowerShell
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Decode Base64 using PowerShell
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path output_pwsh | Out-Null

          # read entire file
          $raw = Get-Content "${{ inputs.base64_file }}" -Raw

          # drop data URI prefix if present
          if ($raw -match '^data:') {
            $raw = $raw.Split(',')[-1]
          }

          # decode & write
          $bytes = [System.Convert]::FromBase64String($raw.Trim())
          [System.IO.File]::WriteAllBytes("output_pwsh\image.png", $bytes)

      - name: Upload PowerShell Output
        uses: actions/upload-artifact@v4
        with:
          name: decoded-image-powershell
          path: output_pwsh/
