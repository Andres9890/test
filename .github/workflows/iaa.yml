name: Upload repo to Internet Archive (10 options)

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: "Git repository URL to clone (https or ssh)"
        required: true
      identifier:
        description: "Archive.org item identifier (leave blank to auto-generate)"
        required: false
        default: ""
      title:
        description: "Item title"
        required: false
        default: ""
      description:
        description: "Item description"
        required: false
        default: ""
      mediatype:
        description: "Mediatype (e.g., data, software, texts, image, audio, movies)"
        required: false
        default: "data"
      collection:
        description: "Collection (e.g., opensource)"
        required: false
        default: "opensource"
      subject:
        description: "Comma-separated subjects/tags"
        required: false
        default: ""
      creator:
        description: "Creator / author"
        required: false
        default: ""
      licenseurl:
        description: "License URL"
        required: false
        default: ""
      metadata_json:
        description: "Extra metadata as JSON (merged into item-level metadata)"
        required: false
        default: "{}"

jobs:
  upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      IN_REPO_URL: ${{ inputs.repo_url }}
      IN_IDENTIFIER: ${{ inputs.identifier }}
      IN_TITLE: ${{ inputs.title }}
      IN_DESCRIPTION: ${{ inputs.description }}
      IN_MEDIATYPE: ${{ inputs.mediatype }}
      IN_COLLECTION: ${{ inputs.collection }}
      IN_SUBJECT: ${{ inputs.subject }}
      IN_CREATOR: ${{ inputs.creator }}
      IN_LICENSEURL: ${{ inputs.licenseurl }}
      IN_METADATA_JSON: ${{ inputs.metadata_json }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install internetarchive
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade internetarchive

      - name: Configure IA (email + password)
        # Requires repository secrets: IA_EMAIL and IA_PASSWORD
        env:
          IA_EMAIL: ${{ secrets.IA_EMAIL }}
          IA_PASSWORD: ${{ secrets.IA_PASSWORD }}
        run: |
          printf "%s\n%s\n" "$IA_EMAIL" "$IA_PASSWORD" | ia configure
          ia whoami || true

      - name: Clone target repository
        run: |
          git clone --depth=1 "$IN_REPO_URL" target_repo

      - name: Upload all files to Archive.org (Python)
        run: |
          python - <<'PY'
          import json, os, re, sys
          from pathlib import Path
          from datetime import datetime, timezone
          from urllib.parse import urlparse
          from internetarchive import upload

          def slugify(s):
            s = re.sub(r'[^a-zA-Z0-9._-]+', '-', s.strip())
            return re.sub(r'-{2,}', '-', s).strip('-').lower()

          repo_url = os.environ["IN_REPO_URL"].strip()
          ident = os.environ.get("IN_IDENTIFIER", "").strip()

          # Derive owner/repo from GitHub-style URL for a nice default identifier
          owner = repo = None
          try:
            parsed = urlparse(repo_url)
            if "github.com" in parsed.netloc and parsed.path:
              parts = [p for p in parsed.path.split('/') if p]
              if len(parts) >= 2:
                owner, repo = parts[0], parts[1].removesuffix(".git")
          except Exception:
            pass

          if not ident:
            ts = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M%S")
            if owner and repo:
              ident = f"github-{slugify(owner)}-{slugify(repo)}-snapshot-{ts}"
            else:
              ident = f"github-snapshot-{ts}"

          # Build metadata (core + extras)
          md = {}
          def put(k, v):
            v = v.strip()
            if v:
              md[k] = v

          put("title", os.environ.get("IN_TITLE",""))
          put("description", os.environ.get("IN_DESCRIPTION",""))
          put("mediatype", os.environ.get("IN_MEDIATYPE",""))
          put("collection", os.environ.get("IN_COLLECTION",""))
          subj = os.environ.get("IN_SUBJECT","").strip()
          if subj:
            md["subject"] = [s.strip() for s in subj.split(",") if s.strip()]
          put("creator", os.environ.get("IN_CREATOR",""))
          put("licenseurl", os.environ.get("IN_LICENSEURL",""))

          # Always set source to the repo URL for provenance
          if repo_url:
            md["source"] = repo_url

          # Merge arbitrary metadata JSON
          extra = os.environ.get("IN_METADATA_JSON","{}").strip()
          if extra:
            try:
              extra_md = json.loads(extra)
              if not isinstance(extra_md, dict):
                raise ValueError("metadata_json must be a JSON object")
              if "subject" in extra_md and "subject" in md and isinstance(extra_md["subject"], list):
                md["subject"] = list(dict.fromkeys(md["subject"] + extra_md["subject"]))
                extra_md.pop("subject")
              md.update(extra_md)
            except Exception as e:
              print(f"WARNING: metadata_json ignored: {e}", file=sys.stderr)

          base = Path("target_repo")
          files = [str(p) for p in base.rglob("*") if p.is_file() and ".git" not in p.parts]
          if not files:
            print("No files found to upload.", file=sys.stderr)
            sys.exit(1)

          print(f"Identifier: {ident}")
          print(f"Uploading {len(files)} files...")
          resp = upload(ident, files, metadata=md, verbose=True)

          ok = True
          for success, task in resp:
            if not success:
              ok = False
              print(f"FAILED: {task}", file=sys.stderr)
          if not ok:
            sys.exit(2)
          print("Upload complete.")
          PY
