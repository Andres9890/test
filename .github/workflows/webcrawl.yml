name: Archive Website to IA

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Website URL to archive'
        required: true
        default: 'https://example.com'
      max_depth:
        description: 'Maximum crawl depth (default: 3)'
        required: false
        default: '3'
      max_pages:
        description: 'Maximum number of pages to crawl (default: 100)'
        required: false
        default: '100'
      crawler_args:
        description: 'Additional wget arguments (e.g., --no-parent --reject "*.pdf")'
        required: false
      ia_identifier:
        description: 'Custom IA identifier (optional, auto-generated if empty)'
        required: false

jobs:
  archive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache pip
      uses: actions/cache@v4.2.3
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-warc-cache-${{ hashFiles('.github/workflows/archive-website.yml') }}
        restore-keys: |
          ${{ runner.os }}-warc-cache-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install internetarchive
        sudo apt-get update
        sudo apt-get install -y wget

    - name: Configure IA CLI
      env:
        IA_EMAIL: ${{ secrets.WEB_EMAIL }}
        IA_PASSWORD: ${{ secrets.WEB_PASSWORD }}
      run: |
        printf "%s\n%s\n" "$IA_EMAIL" "$IA_PASSWORD" | ia configure

    - name: Create output directory
      run: mkdir -p warc-output

    - name: Generate identifier
      id: identifier
      run: |
        if [ -z "${{ github.event.inputs.ia_identifier }}" ]; then
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IDENTIFIER="andrescrawls-${TIMESTAMP}"
        else
          IDENTIFIER="${{ github.event.inputs.ia_identifier }}"
        fi
        echo "identifier=${IDENTIFIER}" >> $GITHUB_OUTPUT
        echo "Generated identifier: ${IDENTIFIER}"

    - name: Test connectivity
      run: |
        echo "Testing connection to ${{ github.event.inputs.url }}"
        curl -I -L --max-time 30 "${{ github.event.inputs.url }}" || echo "Warning: Initial connection test had issues"

    - name: Crawl website and create WARC
      run: |
        cd warc-output
        
        echo "Starting wget crawl of ${{ github.event.inputs.url }}"
        echo "Crawl depth: ${{ github.event.inputs.max_depth }}"
        echo "Identifier: ${{ steps.identifier.outputs.identifier }}"
        
        set +e  # Don't exit on error
        wget \
          --warc-file="${{ steps.identifier.outputs.identifier }}" \
          --warc-cdx \
          --recursive \
          --level=${{ github.event.inputs.max_depth }} \
          --page-requisites \
          --adjust-extension \
          --convert-links \
          --backup-converted \
          --execute robots=off \
          --user-agent="Mozilla/5.0 (compatible; ArchiveBot/1.0; +https://github.com/AndresCrawls)" \
          --timeout=30 \
          --dns-timeout=10 \
          --wait=1 \
          --random-wait \
          --no-clobber \
          --retry-connrefused \
          --waitretry=5 \
          --tries=3 \
          --no-check-certificate \
          ${{ github.event.inputs.crawler_args }} \
          "${{ github.event.inputs.url }}" 2>&1 | tee wget.log
        
        WGET_EXIT=$?
        set -e  # Re-enable exit on error
        
        echo "Wget completed with exit code: ${WGET_EXIT}"
        
        # Wget exit codes:
        # 0 = success
        # 1 = generic error
        # 2 = parse error
        # 3 = file I/O error
        # 4 = network failure
        # 5 = SSL verification failure
        # 6 = username/password authentication failure
        # 7 = protocol errors
        # 8 = server issued an error response
        
        if [ ${WGET_EXIT} -eq 4 ]; then
          echo "Warning: Network failure occurred (exit code 4)"
          echo "This may be due to connectivity issues, DNS problems, or server blocking"
        elif [ ${WGET_EXIT} -eq 5 ]; then
          echo "Warning: SSL verification failure (exit code 5)"
          echo "Already using --no-check-certificate, check server SSL configuration"
        elif [ ${WGET_EXIT} -ne 0 ]; then
          echo "Warning: Wget exited with code ${WGET_EXIT}"
        fi
        
        echo "Checking for created files..."
        ls -lah
        
        # Compress WARC if it exists
        if [ -f "${{ steps.identifier.outputs.identifier }}.warc" ]; then
          echo "Compressing WARC file..."
          gzip "${{ steps.identifier.outputs.identifier }}.warc"
          echo "WARC file compressed successfully"
        else
          echo "Warning: No WARC file was created"
        fi

    - name: Check if files exist before upload
      id: check_files
      run: |
        cd warc-output
        if ls *.warc.gz 1> /dev/null 2>&1 || ls *.warc 1> /dev/null 2>&1; then
          echo "has_files=true" >> $GITHUB_OUTPUT
          echo "Files ready for upload"
        else
          echo "has_files=false" >> $GITHUB_OUTPUT
          echo "Warning: No WARC files found to upload"
        fi

    - name: Upload to Internet Archive
      if: steps.check_files.outputs.has_files == 'true'
      run: |
        cd warc-output
        SCANDATE=$(date -u +%Y%m%d%H%M%S)
        DISPLAY_DATE=$(date -u +"%Y-%m-%d %H:%M:%S")
        DATE_ONLY=$(date -u +%Y-%m-%d)
        
        echo "Uploading to Internet Archive as: ${{ steps.identifier.outputs.identifier }}"
        echo "Files to upload:"
        ls -lh *.warc.gz *.cdx *.json 2>/dev/null || ls -lh *.warc *.cdx *.json 2>/dev/null || echo "Warning: Some expected files missing"
        
        ia upload \
          "${{ steps.identifier.outputs.identifier }}" \
          *.warc.gz *.cdx *.json \
          --metadata="collection:opensource_media" \
          --metadata="mediatype:web" \
          --metadata="title:Andrescrawls ${DISPLAY_DATE}" \
          --metadata="description:Andres web archive crawl of ${{ github.event.inputs.url }} created on ${DISPLAY_DATE}" \
          --metadata="subject:web archive" \
          --metadata="subject:warc" \
          --metadata="subject:web crawl" \
          --metadata="creator:Andrescrawls" \
          --metadata="date:${DATE_ONLY}" \
          --metadata="scandate:${SCANDATE}" \
          --metadata="scanner:AndresCrawls Web Crawler 1.0.0"
        
        echo "Upload completed successfully"

    - name: Output results
      run: |
        echo "================================"
        echo "Archive Process Complete"
        echo "================================"
        if [ "${{ steps.check_files.outputs.has_files }}" == "true" ]; then
          echo "Status: SUCCESS"
          echo "Internet Archive URL: https://archive.org/details/${{ steps.identifier.outputs.identifier }}"
        else
          echo "Status: FAILED - No files were created"
          echo "Check the logs above for wget errors"
        fi
        echo ""
        echo "Files created in warc-output/:"
        ls -lh warc-output/

    - name: Upload artifacts (for debugging)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: warc-files
        path: warc-output/
        retention-days: 90
